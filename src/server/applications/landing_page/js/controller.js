// Generated by CoffeeScript 1.6.3
(function() {
  var Async, CBLandingPage, NwGlobal, appConfig, creator, currentVirtualBrowser;

  Async = require('async');

  NwGlobal = require('nwglobal');

  currentVirtualBrowser = cloudbrowser.currentVirtualBrowser;

  appConfig = currentVirtualBrowser.getAppConfig();

  creator = currentVirtualBrowser.getCreator();

  CBLandingPage = angular.module("CBLandingPage", []);

  CBLandingPage.controller("UserCtrl", function($scope, $timeout) {
    var Selected, VirtualBrowsers, addCollaborator, checkPermission, formatDate, grantPerm, months, sendMail, toggleEnabledDisabled;
    $scope.user = {
      email: creator.getEmail(),
      ns: creator.getNameSpace()
    };
    $scope.description = appConfig.getDescription();
    $scope.mountPoint = appConfig.getMountPoint();
    $scope.virtualBrowserList = [];
    $scope.selected = [];
    $scope.isDisabled = {
      open: true,
      share: true,
      del: true,
      rename: true
    };
    $scope.addingReaderWriter = false;
    $scope.confirmDelete = false;
    $scope.addingOwner = false;
    $scope.predicate = 'dateCreated';
    $scope.reverse = true;
    $scope.filterType = 'all';
    $scope.safeApply = function(fn) {
      var phase;
      phase = this.$root.$$phase;
      if (phase === '$apply' || phase === '$digest') {
        if (fn) {
          return fn();
        }
      } else {
        return this.$apply(fn);
      }
    };
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    formatDate = function(date) {
      var day, hours, minutes, month, time, timeSuffix, year;
      if (!date) {
        return null;
      }
      month = months[date.getMonth()];
      day = date.getDate();
      year = date.getFullYear();
      hours = date.getHours();
      timeSuffix = hours < 12 ? 'am' : 'pm';
      hours = hours % 12;
      hours = hours ? hours : 12;
      minutes = date.getMinutes();
      minutes = minutes > 10 ? minutes : '0' + minutes;
      time = hours + ":" + minutes + " " + timeSuffix;
      date = day + " " + month + " " + year + " (" + time + ")";
      return date;
    };
    VirtualBrowsers = (function() {
      function VirtualBrowsers() {}

      VirtualBrowsers.find = function(id) {
        var vb, _i, _len, _ref;
        _ref = $scope.virtualBrowserList;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          vb = _ref[_i];
          if (vb.id === id) {
            return vb;
          }
        }
      };

      VirtualBrowsers.add = function(vbConfig) {
        var vb;
        vb = VirtualBrowsers.find(vbConfig.getID());
        if (vb) {
          return vb;
        }
        vb = {
          api: vbConfig,
          id: vbConfig.getID(),
          name: vbConfig.getName(),
          dateCreated: formatDate(vbConfig.getDateCreated())
        };
        vb.api.getOwners(function(err, owners) {
          if (err) {
            return;
          }
          return $scope.safeApply(function() {
            return vb.owners = owners;
          });
        });
        vb.api.getReaderWriters(function(err, readerWriters) {
          if (err) {
            return;
          }
          return $scope.safeApply(function() {
            return vb.collaborators = readerWriters;
          });
        });
        VirtualBrowsers.setupEventListeners(vb);
        $scope.virtualBrowserList.push(vb);
        return vb;
      };

      VirtualBrowsers.setupEventListeners = function(vb) {
        vb.api.addEventListener('shared', function() {
          return Async.waterfall(NwGlobal.Array(function(next) {
            return vb.api.getOwners(next);
          }, function(owners, next) {
            $scope.safeApply(function() {
              return vb.owners = owners;
            });
            return next(null);
          }, function(next) {
            return vb.api.getReaderWriters(next);
          }, function(readersWriters, next) {
            $scope.safeApply(function() {
              return vb.collaborators = readersWriters;
            });
            return next(null);
          }), function(err) {
            if (err) {
              return $scope.safeApply(function() {
                return $scope.error = err.message;
              });
            }
          });
        });
        return vb.api.addEventListener('renamed', function(name) {
          return $scope.safeApply(function() {
            return vb.name = name;
          });
        });
      };

      VirtualBrowsers.remove = function(id) {
        var idx, vb, _i, _len, _ref;
        _ref = $scope.virtualBrowserList;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          vb = _ref[_i];
          if (!(vb.id === id)) {
            continue;
          }
          idx = $scope.virtualBrowserList.indexOf(vb);
          Selected.remove(id);
          return $scope.virtualBrowserList.splice(idx, 1);
        }
      };

      return VirtualBrowsers;

    })();
    Selected = (function() {
      function Selected() {}

      Selected.add = function(id) {
        if ($scope.selected.indexOf(id) === -1) {
          return $scope.selected.push(id);
        }
      };

      Selected.remove = function(id) {
        var idx;
        idx = $scope.selected.indexOf(id);
        if (idx !== -1) {
          return $scope.selected.splice(idx, 1);
        }
      };

      Selected.isSelected = function(id) {
        return $scope.selected.indexOf(id) >= 0;
      };

      Selected.areAllSelected = function() {
        return $scope.selected.length === $scope.virtualBrowserList.length;
      };

      return Selected;

    })();
    checkPermission = function(type, callback) {
      return Async.detect($scope.selected, function(vbID, callback) {
        var vb;
        vb = VirtualBrowsers.find(vbID);
        return vb.api.checkPermissions(type, function(err, hasPermission) {
          if (err) {
            return $scope.safeApply(function() {
              return $scope.error = err.message;
            });
          } else {
            return callback(!hasPermission);
          }
        });
      }, function(permissionDenied) {
        return callback(!permissionDenied);
      });
    };
    toggleEnabledDisabled = function(numSelected) {
      if (numSelected > 0) {
        $scope.safeApply(function() {
          return $scope.isDisabled.open = false;
        });
        checkPermission({
          remove: true
        }, function(canRemove) {
          return $scope.safeApply(function() {
            return $scope.isDisabled.del = !canRemove;
          });
        });
        return checkPermission({
          own: true
        }, function(isOwner) {
          return $scope.safeApply(function() {
            $scope.isDisabled.share = !isOwner;
            return $scope.isDisabled.rename = !isOwner;
          });
        });
      } else {
        return $scope.safeApply(function() {
          $scope.isDisabled.open = true;
          $scope.isDisabled.del = true;
          $scope.isDisabled.rename = true;
          return $scope.isDisabled.share = true;
        });
      }
    };
    appConfig.getVirtualBrowsers(function(err, virtualBrowsers) {
      var vbAPI, _i, _len, _results;
      if (err) {
        return;
      }
      _results = [];
      for (_i = 0, _len = virtualBrowsers.length; _i < _len; _i++) {
        vbAPI = virtualBrowsers[_i];
        _results.push(VirtualBrowsers.add(vbAPI));
      }
      return _results;
    });
    appConfig.addEventListener('added', function(vbAPI) {
      return $scope.safeApply(function() {
        return VirtualBrowsers.add(vbAPI);
      });
    });
    appConfig.addEventListener('removed', function(id) {
      return $scope.safeApply(function() {
        return VirtualBrowsers.remove(id);
      });
    });
    $scope.$watch('selected.length', function(newValue, oldValue) {
      toggleEnabledDisabled(newValue);
      $scope.addingReaderWriter = false;
      return $scope.addingOwner = false;
    });
    $scope.createVB = function() {
      return appConfig.createVirtualBrowser(function(err) {
        if (err) {
          return $scope.safeApply(function() {
            return $scope.error = err.message;
          });
        }
      });
    };
    $scope.logout = function() {
      return cloudbrowser.auth.logout();
    };
    $scope.open = function() {
      var id, openNewTab, _i, _len, _ref, _results;
      openNewTab = function(id) {
        var url, win;
        url = appConfig.getUrl() + "/browsers/" + id + "/index";
        return win = window.open(url, '_blank');
      };
      _ref = $scope.selected;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        _results.push(openNewTab(id));
      }
      return _results;
    };
    $scope.remove = function() {
      var id, _i, _len, _ref;
      _ref = $scope.selected;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        VirtualBrowsers.find(id).api.close(function(err) {
          if (err) {
            return $scope.safeApply(function() {
              return $scope.error = err.message;
            });
          }
        });
      }
      return $scope.confirmDelete = false;
    };
    $scope.areAllSelected = Selected.areAllSelected;
    $scope.isSelected = Selected.isSelected;
    sendMail = function(email, callback) {
      var msg, subject;
      subject = ("CloudBrowser - " + $scope.user.email) + " shared an vb with you.";
      msg = ("Hi " + email + "<br>To view the vb, visit") + (" <a href='" + (appConfig.getUrl()) + "'>" + $scope.mountPoint + "</a> and") + " login to your existing account or use your google ID to login" + " if you do not have an account already.";
      return cloudbrowser.util.sendEmail(email, subject, msg, callback);
    };
    grantPerm = function(user, perm, callback) {
      var grantPermission;
      grantPermission = function(id, callback) {
        var vb;
        vb = VirtualBrowsers.find(id);
        return Async.series(NwGlobal.Array(function(next) {
          return vb.api.grantPermissions(perm, user, next);
        }, function(next) {
          return sendMail(user.getEmail(), next);
        }), callback);
      };
      return Async.each($scope.selected, grantPermission, function(err) {
        return callback(err, user);
      });
    };
    addCollaborator = function(selectedUser, perm, callback) {
      var emailID, lParIdx, namespace, rParIdx, user;
      lParIdx = selectedUser.indexOf("(");
      rParIdx = selectedUser.indexOf(")");
      if (lParIdx !== -1 && rParIdx !== -1) {
        emailID = selectedUser.substring(0, lParIdx - 1);
        namespace = selectedUser.substring(lParIdx + 1, rParIdx);
        user = new cloudbrowser.app.User(emailID, namespace);
        return appConfig.isUserRegistered(user, function(err, exists) {
          if (err) {
            return $scope.safeApply(function() {
              return $scope.error = err.message;
            });
          } else if (exists) {
            return grantPerm(user, perm, callback);
          } else {
            return $scope.safeApply(function() {
              return $scope.error = "Invalid Collaborator Selected";
            });
          }
        });
      } else if (lParIdx === -1 && rParIdx === -1 && /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/.test(selectedUser.toUpperCase())) {
        user = new cloudbrowser.app.User(selectedUser, "google");
        return grantPerm(user, perm, callback);
      } else {
        return $scope.error = "Invalid Collaborator Selected";
      }
    };
    $scope.openAddReaderWriterForm = function() {
      $scope.addingReaderWriter = !$scope.addingReaderWriter;
      if ($scope.addingReaderWriter) {
        return $scope.addingOwner = false;
      }
    };
    $scope.addReaderWriter = function() {
      return addCollaborator($scope.selectedReaderWriter, {
        readwrite: true
      }, function(err, user) {
        return $scope.safeApply(function() {
          if (err) {
            return $scope.error = err.message;
          } else {
            $scope.boxMessage = "The selected virtual browsers are now shared with " + user.getEmail() + " (" + user.getNameSpace() + ")";
            $scope.addingReaderWriter = false;
            return $scope.selectedReaderWriter = null;
          }
        });
      });
    };
    $scope.openAddOwnerForm = function() {
      $scope.addingOwner = !$scope.addingOwner;
      if ($scope.addingOwner) {
        return $scope.addingReaderWriter = false;
      }
    };
    $scope.addOwner = function() {
      return addCollaborator($scope.selectedOwner, {
        own: true,
        remove: true,
        readwrite: true
      }, function(err, user) {
        return $scope.safeApply(function() {
          $scope.boxMessage = "The selected virtualBrowsers are now shared with " + user.getEmail() + " (" + user.getNameSpace() + ")";
          $scope.addingOwner = false;
          return $scope.selectedOwner = null;
        });
      });
    };
    $scope.select = function($event, id) {
      var checkbox;
      checkbox = $event.target;
      if (checkbox.checked) {
        return Selected.add(id);
      } else {
        return Selected.remove(id);
      }
    };
    $scope.selectAll = function($event) {
      var action, checkbox, vb, _i, _len, _ref, _results;
      checkbox = $event.target;
      action = checkbox.checked ? 'add' : 'remove';
      _ref = $scope.virtualBrowserList;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        vb = _ref[_i];
        _results.push(Selected[action](vb.id));
      }
      return _results;
    };
    $scope.getSelectedClass = function(id) {
      if (Selected.isSelected(id)) {
        return 'highlight';
      } else {
        return '';
      }
    };
    $scope.rename = function() {
      var id, _i, _len, _ref, _results;
      _ref = $scope.selected;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        _results.push(VirtualBrowsers.find(id).editing = true);
      }
      return _results;
    };
    return $scope.clickRename = function(id) {
      var vb;
      vb = VirtualBrowsers.find(id);
      return vb.api.isOwner(creator, function(err, isOwner) {
        if (isOwner) {
          return $scope.safeApply(function() {
            return vb.editing = true;
          });
        }
      });
    };
  });

  CBLandingPage.filter("removeSlash", function() {
    return function(input) {
      var mps;
      mps = input.split('/');
      return mps[mps.length - 1];
    };
  });

  CBLandingPage.filter("virtualBrowserFilter", function() {
    var _this = this;
    return function(list, arg) {
      var filterType, modifiedList, user, vb, _fn, _fn1, _fn2, _fn3, _i, _j, _k, _l, _len, _len1, _len2, _len3;
      filterType = arg.type;
      user = new cloudbrowser.app.User(arg.user.email, arg.user.ns);
      modifiedList = [];
      switch (filterType) {
        case 'owned':
          _fn = function(vb) {
            return Async.waterfall(NwGlobal.Array(function(next) {
              return vb.api.isOwner(user, next);
            }, function(isOwner, next) {
              if (isOwner) {
                return modifiedList.push(vb);
              }
            }), function(err) {
              if (err) {
                return $scope.safeApply(function() {
                  return $scope.error = err.message;
                });
              }
            });
          };
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            vb = list[_i];
            _fn(vb);
          }
          break;
        case 'notOwned':
          _fn1 = function(vb) {
            return Async.waterfall(NwGlobal.Array(function(next) {
              return vb.api.isOwner(user, next);
            }, function(isOwner, next) {
              if (!isOwner) {
                modifiedList.push(vb);
              }
              return next(null);
            }), function(err) {
              if (err) {
                return $scope.safeApply(function() {
                  return $scope.error = err.message;
                });
              }
            });
          };
          for (_j = 0, _len1 = list.length; _j < _len1; _j++) {
            vb = list[_j];
            _fn1(vb);
          }
          break;
        case 'shared':
          _fn2 = function(vb) {
            return Async.waterfall(NwGlobal.Array(function(next) {
              return vb.api.getNumReaderWriters(next);
            }, function(numReaderWriters, next) {
              if (numReaderWriters) {
                modifiedList.push(vb);
                return callback(null);
              } else {
                return vb.api.getNumOwners(next);
              }
            }, function(numOwners, next) {
              if (numOwners > 1) {
                modifiedList.push(vb);
              }
              return next(null);
            }), function(err) {
              if (err) {
                return $scope.safeApply(function() {
                  return $scope.error = err.message;
                });
              }
            });
          };
          for (_k = 0, _len2 = list.length; _k < _len2; _k++) {
            vb = list[_k];
            _fn2(vb);
          }
          break;
        case 'notShared':
          _fn3 = function(vb) {
            return Async.waterfall(NwGlobal.Array(function(next) {
              return vb.api.getNumOwners(next);
            }, function(numOwners, next) {
              if (numOwners === 1) {
                return vb.api.getNumReaderWriters(next);
              } else {
                return callback(null);
              }
            }, function(numReaderWriters, next) {
              if (!numReaderWriters) {
                modifiedList.push(vb);
              }
              return next(null);
            }), function(err) {
              if (err) {
                return $scope.safeApply(function() {
                  return $scope.error = err.message;
                });
              } else {
                return modifiedList;
              }
            });
          };
          for (_l = 0, _len3 = list.length; _l < _len3; _l++) {
            vb = list[_l];
            _fn3(vb);
          }
          break;
        case 'all':
          modifiedList = list;
      }
      return modifiedList;
    };
  });

  CBLandingPage.directive('ngHasfocus', function() {
    return function(scope, element, attrs) {
      scope.$watch(attrs.ngHasfocus, function(nVal, oVal) {
        if (nVal) {
          return element[0].focus();
        }
      });
      element.bind('blur', function() {
        return scope.$apply(attrs.ngHasfocus + " = false", scope.vb.api.rename(scope.vb.name));
      });
      return element.bind('keydown', function(e) {
        if (e.which === 13) {
          return scope.$apply(attrs.ngHasfocus + " = false", scope.vb.api.rename(scope.vb.name));
        }
      });
    };
  });

  CBLandingPage.directive('typeahead', function() {
    var directive, isUserToBeRemoved, pruneList;
    isUserToBeRemoved = function(scope, user, permChecks, callback) {
      return Async.detect(scope.selected, function(vbID, callback) {
        var item, vb, waterfallCallback, _i, _len, _ref;
        _ref = scope.virtualBrowserList;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.id === vbID) {
            vb = item;
          }
        }
        waterfallCallback = function(err, result) {
          if (err) {
            return scope.safeApply(function() {
              return scope.error = err.message;
            });
          } else {
            return callback(result);
          }
        };
        return Async.waterfall(NwGlobal.Array(function(next) {
          return vb.api.isOwner(user, next);
        }, function(isOwner, next) {
          if (isOwner) {
            return waterfallCallback(null, true);
          } else if (permChecks != null ? permChecks.readerwriter : void 0) {
            return vb.api.isReaderWriter(user, next);
          } else {
            return waterfallCallback(null, false);
          }
        }, function(isReaderWriter, next) {
          if (isReaderWriter) {
            return next(null, true);
          } else {
            return next(null, false);
          }
        }), waterfallCallback);
      }, callback);
    };
    pruneList = function(ngModel, users, scope, callback) {
      var index, newList;
      switch (ngModel) {
        case "selectedReaderWriter":
          index = 0;
          newList = [];
          return Async.each(users, function(user, callback) {
            return isUserToBeRemoved(scope, user, {}, function(toBeRemoved) {
              if (!toBeRemoved) {
                newList.push(user);
              }
              return callback(null);
            });
          }, function(err) {
            return callback(err, newList);
          });
        case "selectedOwner":
          index = 0;
          newList = [];
          return Async.each(users, function(user, callback) {
            return isUserToBeRemoved(scope, user, {
              readwriter: true
            }, function(toBeRemoved) {
              if (!toBeRemoved) {
                newList.push(user);
              }
              return callback(null);
            });
          }, function(err) {
            return callback(err, newList);
          });
      }
    };
    return directive = {
      restrict: 'A',
      link: function(scope, element, attrs) {
        return $(element).typeahead({
          source: function(query, process) {
            return Async.waterfall(NwGlobal.Array(function(next) {
              return appConfig.getUsers(next);
            }, function(users, next) {
              return pruneList(attrs.ngModel, users, scope, next);
            }), function(err, users) {
              var data, user, _i, _len;
              if (err) {
                return scope.safeApply(function() {
                  return scope.error = err.message;
                });
              } else {
                data = [];
                for (_i = 0, _len = users.length; _i < _len; _i++) {
                  user = users[_i];
                  data.push("" + (user.getEmail()) + " (" + (user.getNameSpace()) + ")");
                }
                return process(data);
              }
            });
          },
          updater: function(item) {
            scope.$apply(attrs.ngModel + (" = '" + item + "'"));
            return item;
          }
        });
      }
    };
  });

}).call(this);
