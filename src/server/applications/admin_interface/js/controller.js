// Generated by CoffeeScript 1.6.3
(function() {
  var CBAdmin;

  CBAdmin = angular.module("CBAdmin", []);

  CBAdmin.controller("AppCtrl", function($scope) {
    var App, curInstance, serverConfig;
    $scope.apps = [];
    App = (function() {
      function App(appConfig) {
        var _this = this;
        this.description = appConfig.getDescription();
        this.mountPoint = appConfig.getMountPoint();
        this.url = appConfig.getUrl();
        this.instantiationStrategy = this.camelCaseToWords(appConfig.getInstantiationStrategy());
        this.browserLimit = appConfig.getBrowserLimit();
        this.isAuthEnabled = appConfig.isAuthConfigured();
        this.isPublic = appConfig.isAppPublic();
        this.mounted = appConfig.isMounted();
        this.api = appConfig;
        appConfig.getUsers(function(users) {
          return $scope.safeApply(function() {
            return _this.users = users;
          });
        });
        appConfig.getVirtualBrowsers(function(virtualBrowsers) {
          return $scope.safeApply(function() {
            return _this.virtualBrowsers = virtualBrowsers;
          });
        });
        this.setupEventListeners();
        App.add(this);
      }

      App.prototype.camelCaseToWords = function(camelCaseString) {
        return camelCaseString.replace(/([A-Z])/g, ' $1').replace(/^./, function(str) {
          return str.toUpperCase();
        });
      };

      App.find = function(mountPoint) {
        var app;
        app = $.grep($scope.apps, function(element, index) {
          return element.mountPoint === mountPoint;
        });
        return app[0];
      };

      App.add = function(app) {
        return $scope.safeApply(function() {
          return $scope.apps.push(app);
        });
      };

      App.remove = function(mountPoint) {
        return $scope.safeApply(function() {
          return $scope.apps = $.grep($scope.apps, function(element, index) {
            return element.mountPoint !== mountPoint;
          });
        });
      };

      App.prototype.setupEventListeners = function() {
        var _this = this;
        this.api.addEventListener("added", function(vb) {
          return $scope.safeApply(function() {
            return _this.virtualBrowsers.push(vb);
          });
        });
        return this.api.addEventListener("removed", function(vbID) {
          return $scope.safeApply(function() {
            return _this.virtualBrowsers = $.grep(_this.virtualBrowsers, function(element, index) {
              return element.id !== vbID;
            });
          });
        });
      };

      return App;

    })();
    $scope.safeApply = function(fn) {
      var phase;
      phase = this.$root.$$phase;
      if (phase === '$apply' || phase === '$digest') {
        if (fn) {
          return fn();
        }
      } else {
        return this.$apply(fn);
      }
    };
    curInstance = cloudbrowser.currentVirtualBrowser;
    serverConfig = cloudbrowser.serverConfig;
    $scope.selectedApp = null;
    $scope.areverse = $scope.ureverse = $scope.mreverse = $scope.ireverse = $scope.preverse = false;
    serverConfig.listApps({
      filters: {
        perUser: true
      },
      callback: function(appConfigs) {
        var appConfig, _i, _len;
        for (_i = 0, _len = appConfigs.length; _i < _len; _i++) {
          appConfig = appConfigs[_i];
          new App(appConfig);
        }
        if ($scope.apps.length) {
          return $scope.safeApply(function() {
            return $scope.selectedApp = $scope.apps[0];
          });
        }
      }
    });
    $scope.user = curInstance.getCreator();
    $scope.leftClick = function(url) {
      return curInstance.redirect(url);
    };
    $scope.editDescription = function(mountPoint) {
      var app;
      app = App.find(mountPoint);
      /*
      app.isOwner $scope.user, (isOwner) ->
          if isOwner then $scope.safeApply -> app.editing = true
      */

      return app.editing = true;
    };
    $scope.getBoxClass = function(mountPoint) {
      if (!mountPoint) {
        return;
      }
      if (App.find(mountPoint).mounted === true) {
        return "mounted";
      } else {
        return "disabled";
      }
    };
    $scope.toggleMountDisable = function(mountPoint) {
      var app;
      app = App.find(mountPoint);
      if (app.mounted) {
        if (!app.api.disable()) {
          return app.mounted = false;
        }
      } else {
        if (!app.api.mount()) {
          return app.mounted = true;
        }
      }
    };
    $scope.togglePrivacy = function(mountPoint) {
      var app;
      app = App.find(mountPoint);
      if (app.isPublic) {
        if (!app.api.makePrivate()) {
          return app.isPublic = false;
        }
      } else {
        if (!app.api.makePublic()) {
          return app.isPublic = true;
        }
      }
    };
    $scope.toggleAuthentication = function(mountPoint) {
      var app;
      app = App.find(mountPoint);
      if (app.isAuthEnabled) {
        if (!app.api.disableAuthentication()) {
          return app.isAuthEnabled = false;
        }
      } else {
        if (!app.api.enableAuthentication()) {
          return app.isAuthEnabled = true;
        }
      }
    };
    $scope.selectApp = function(mountPoint) {
      return $scope.selectedApp = App.find(mountPoint);
    };
    return $scope.getAppClass = function(app) {
      if ($scope.selectedApp === app) {
        return "selected";
      } else {
        return "";
      }
    };
  });

  CBAdmin.filter("removeSlash", function() {
    return function(input) {
      if (!input) {
        return;
      }
      if (input === "/") {
        return "Home Page";
      } else {
        return input.substring(1);
      }
    };
  });

  CBAdmin.directive('ngHasfocus', function() {
    return function(scope, element, attrs) {
      scope.$watch(attrs.ngHasfocus, function(nVal, oVal) {
        if (nVal) {
          return element[0].focus();
        }
      });
      element.bind('blur', function() {
        return scope.$apply(attrs.ngHasfocus + " = false", scope.selectedApp.api.setDescription(scope.selectedApp.description));
      });
      return element.bind('keydown', function(e) {
        if (e.which === 13) {
          return scope.$apply(attrs.ngHasfocus + " = false", scope.selectedApp.api.setDescription(scope.selectedApp.description));
        }
      });
    };
  });

}).call(this);
