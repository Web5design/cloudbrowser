// Generated by CoffeeScript 1.6.3
(function() {
  var CBAdmin;

  CBAdmin = angular.module("CBAdmin", []);

  CBAdmin.controller("AppCtrl", function($scope) {
    var App, curVB, fileUploader, fileUploaderDiv, serverConfig, toggle;
    $scope.safeApply = function(fn) {
      var phase;
      phase = this.$root.$$phase;
      if (phase === '$apply' || phase === '$digest') {
        if (fn) {
          return fn();
        }
      } else {
        return this.$apply(fn);
      }
    };
    $scope.apps = [];
    App = (function() {
      function App() {}

      App.camelCaseToWords = function(camelCaseString) {
        return camelCaseString.replace(/([A-Z])/g, ' $1').replace(/^./, function(str) {
          return str.toUpperCase();
        });
      };

      App.add = function(appConfig) {
        var app;
        app = {
          url: appConfig.getUrl(),
          api: appConfig,
          description: appConfig.getDescription(),
          mountPoint: appConfig.getMountPoint(),
          isPublic: appConfig.isAppPublic(),
          mounted: appConfig.isMounted(),
          browserLimit: appConfig.getBrowserLimit(),
          isAuthEnabled: appConfig.isAuthConfigured(),
          instantiationStrategy: App.camelCaseToWords(appConfig.getInstantiationStrategy())
        };
        appConfig.getUsers(function(err, users) {
          if (err) {
            return console.log(err);
          } else {
            return $scope.safeApply(function() {
              return app.users = users;
            });
          }
        });
        appConfig.getBrowsers(function(err, browsers) {
          if (err) {
            return console.log(err);
          } else {
            return $scope.safeApply(function() {
              return app.browsers = browsers;
            });
          }
        });
        App.setupEventListeners(app);
        return $scope.apps.push(app);
      };

      App.remove = function(mountPoint) {
        var app, idx, _i, _len, _ref;
        _ref = $scope.apps;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          app = _ref[_i];
          if (!(app.mountPoint === mountPoint)) {
            continue;
          }
          idx = $scope.apps.indexOf(app);
          return $scope.apps.splice(idx, 1);
        }
      };

      App.setupEventListeners = function(app) {
        app.api.addEventListener("add", function(vb) {
          return $scope.safeApply(function() {
            return app.browsers.push(vb);
          });
        });
        return app.api.addEventListener("remove", function(vbID) {
          return $scope.safeApply(function() {
            var idx, vb, _i, _len, _ref, _results;
            _ref = app.browsers;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              vb = _ref[_i];
              if (!(vb.id === vbID)) {
                continue;
              }
              idx = app.browsers.indexOf(vb);
              _results.push(app.browsers.splice(idx, 1));
            }
            return _results;
          });
        });
      };

      return App;

    })();
    curVB = cloudbrowser.currentBrowser;
    serverConfig = cloudbrowser.serverConfig;
    serverConfig.addEventListener("add", function(appConfig) {
      return App.add(appConfig);
    });
    serverConfig.addEventListener("remove", function(appConfig) {
      return App.remove(appConfig);
    });
    fileUploaderDiv = document.getElementById('file-uploader');
    fileUploader = curVB.createComponent('fileUploader', fileUploaderDiv, {
      form: {
        action: "" + (serverConfig.getUrl()) + "/gui-deploy",
        "class": "form-inline well",
        enctype: "multipart/form-data"
      },
      legend: "Upload an Application",
      inputSubmit: {
        name: "Upload",
        "class": "btn btn-primary"
      },
      inputText: {
        placeholder: "App Name",
        style: "margin-right: 10px",
        name: "appName"
      },
      inputFile: {
        accept: "application/x-gzip",
        name: "newApp"
      }
    });
    $scope.user = curVB.getCreator();
    $scope.selectedApp = null;
    serverConfig.listApps({
      filters: {
        perUser: true
      },
      callback: function(err, appConfigs) {
        if (err) {
          return console.log(err);
        } else {
          return $scope.safeApply(function() {
            var appConfig, _i, _len;
            for (_i = 0, _len = appConfigs.length; _i < _len; _i++) {
              appConfig = appConfigs[_i];
              App.add(appConfig);
            }
            if ($scope.apps.length) {
              return $scope.safeApply(function() {
                return $scope.selectedApp = $scope.apps[0];
              });
            }
          });
        }
      }
    });
    $scope.leftClick = function(url) {
      return curVB.redirect(url);
    };
    $scope.editDescription = function(app) {
      return app.api.isOwner($scope.user, function(err, isOwner) {
        if (isOwner) {
          return $scope.safeApply(function() {
            return app.editing = true;
          });
        }
      });
    };
    $scope.getBoxClass = function(app) {
      if (!app) {
        return;
      }
      if (app.mounted === true) {
        return "mounted";
      } else {
        return "disabled";
      }
    };
    toggle = function(app, property, method1, method2) {
      if (app[property]) {
        return app.api[method1](function(err) {
          if (err) {
            return console.log(err);
          } else {
            return $scope.safeApply(function() {
              return app[property] = false;
            });
          }
        });
      } else {
        return app.api[method2](function(err) {
          if (err) {
            return console.log(err);
          } else {
            return $scope.safeApply(function() {
              return app[property] = true;
            });
          }
        });
      }
    };
    $scope.toggleMountDisable = function(app) {
      return toggle(app, 'mounted', 'disable', 'mount');
    };
    $scope.togglePrivacy = function(app) {
      return toggle(app, 'isPublic', 'makePrivate', 'makePublic');
    };
    $scope.toggleAuthentication = function(app) {
      return toggle(app, 'isAuthEnabled', 'disableAuthentication', 'enableAuthentication');
    };
    $scope.selectApp = function(app) {
      return $scope.selectedApp = app;
    };
    $scope.getAppClass = function(app) {
      if ($scope.selectedApp === app) {
        return "selected";
      } else {
        return "";
      }
    };
    $scope.logout = function() {
      return cloudbrowser.auth.logout();
    };
    return $scope.sortBy = function(predicate) {
      var reverseProp;
      $scope.predicate = predicate;
      reverseProp = "" + predicate + "-reverse";
      $scope[reverseProp] = !$scope[reverseProp];
      return $scope.reverse = $scope[reverseProp];
    };
  });

  CBAdmin.filter("removeSlash", function() {
    return function(input) {
      if (!input) {
        return;
      }
      if (input === "/") {
        return "Home Page";
      } else {
        return input.substring(1);
      }
    };
  });

  CBAdmin.directive('ngHasfocus', function() {
    return function(scope, element, attrs) {
      scope.$watch(attrs.ngHasfocus, function(nVal, oVal) {
        if (nVal) {
          return element[0].focus();
        }
      });
      element.bind('blur', function() {
        return scope.$apply(attrs.ngHasfocus + " = false", scope.selectedApp.api.setDescription(scope.selectedApp.description));
      });
      return element.bind('keydown', function(e) {
        if (e.which === 13) {
          return scope.$apply(attrs.ngHasfocus + " = false", scope.selectedApp.api.setDescription(scope.selectedApp.description));
        }
      });
    };
  });

}).call(this);
