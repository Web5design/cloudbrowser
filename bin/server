#!/usr/bin/env node

require('coffee-script');
var Path   = require('path'),
    vt     = require('../');
    Server = vt.Server,
    ko     = vt.ko,
    config = require('../src/shared/config');

// TODO: instead of global.opts, put these in an object that can be required.
//       better, plus then it'll work on client.
var opts = require('nomnom')
    .option('debug', {
        abbr    : 'd',
        flag    : true,
        default : false,
        help    : "Enable debug mode."})
    .option('debugServer', {
        full    : 'debug-server',
        flag    : true,
        default : false,
        help    : "Enable the debug server."})
    .option('compression', {
        abbr    : 'z',
        default : true,
        help    : "Enable protocol compression."})
    .option('knockout', {
        abbr    : 'k',
        default : false,
        flag    : true,
        help    : "Enable server-side knockout.js bindings."})
    .option('resourceProxy', {
        abbr    : 'r',
        full    : 'resource-proxy',
        default : true,
        help    : "Enable ResourceProxy."})
    .option('config', {
        abbr    : 'c',
        help    : "A file containing a server configuration function"})
    .option('app', {
        position : 0,
        required : true,
        help : "The entry point to the application."}).parse();

for (var p in opts) {
    if (opts.hasOwnProperty(p)) {
        config[p] = opts[p];
    }
}

if (opts.debug) {
    console.log("Config:");
    console.log(config);
    if (opts.app) {
        console.log("Loading app from: " + opts.app);
    }
}

var shared = {};
var local = undefined;
if (opts.config) {
    var configure = require(Path.resolve(process.cwd(), opts.config)).configure;
    local = configure(shared, ko);
}

if (!local) {
    local = function () {};
}

var s = new Server({
    app         : opts.app,
    shared      : shared,
    local       : local,
    debugServer : opts.debugServer
});


s.once('ready', function () {
    console.log('All services running, ready for clients.')
});
