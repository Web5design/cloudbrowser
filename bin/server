#!/usr/bin/env node

require('coffee-script');
var Path        = require('path'),
    vt          = require('../');
    Server      = vt.Server,
    ko          = vt.ko,
    Application = require('../src/server/application'),
    config      = require('../src/shared/config');

var opts = require('nomnom')
    .option('debug', {
        flag    : true,
        default : false,
        help    : "Enable debug mode."})
    .option('debugServer', {
        full    : 'debug-server',
        flag    : true,
        default : false,
        help    : "Enable the debug server."})
    .option('compression', {
        default : true,
        help    : "Enable protocol compression."})
    .option('knockout', {
        default : false,
        flag    : true,
        help    : "Enable server-side knockout.js bindings."})
    .option('strict', {
        default : false,
        flag    : true,
        help    : "Enable strict mode - uncaught exceptions exit the program."})
    .option('resourceProxy', {
        full    : 'resource-proxy',
        default : true,
        help    : "Enable ResourceProxy."})
    .option('monitorTraffic', {
        full    : 'monitor-traffic',
        default : false,
        help    : "Monitor/log traffic to/from socket.io clients."})
    // TODO: make this a json file with the actual server config
    //       app config is with app parameter now.
    .option('config', {
        help    : "A file containing a server configuration function"})
    .option('evalMode', {
        abbr    : 'e',
        full    : 'eval-mode',
        default : false,
        help    : "Enable evaluation mode for performance measuring."})
    .option('app', {
        position : 0,
        required : true,
        help : "The configuration function for the default application."}).parse();


for (var p in opts) {
    if (opts.hasOwnProperty(p)) {
        config[p] = opts[p];
    }
}

if (opts.debug) {
    console.log("Config:");
    console.log(config);
}

if (!opts.strict) {
    process.on('uncaughtException', function (err) {
        console.log("Uncaught Exception:");
        console.log(err);
    });
}

var defaultApp = null;
// We support passing a URL instead of an application config file for quick
// testing.
if (/^http/.test(opts.app) || /\.html$/.test(opts.app)) {
    defaultApp = new Application({
        entryPoint : opts.app,
        mountPoint : '/'
    });
} else {
    var appConfigPath = Path.resolve(process.cwd(), opts.app);
    var appOpts = require(appConfigPath).app;
    defaultApp = new Application(appOpts);
}

var s = new Server({
    defaultApp  : defaultApp,
    debugServer : opts.debugServer
});

s.once('ready', function () {
    console.log('All services running, ready for clients.')
});
