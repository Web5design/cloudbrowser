var vt       = require('vt'),
    Fixtures = require ('./fixtures/fixtures'),
    Envs     = Fixtures.Environments;

/* BrowserManager/BrowserInstance integration test. */
exports.testLocalPage = function (test) {
    var count = 0;
    Envs.forEach(function (env) {
        var manager = new vt.BrowserManager(env);
        var Hello = Fixtures.Hello;
        manager.lookup(1, function (browser) {
            browser.loadFromFile(__dirname + '/' + Hello.pathStr, function () {
                test.notEqual(browser.env.getHTML(), "", "Page should not be empty.");
                var copy = new vt.BrowserInstance(env)
                copy.loadFromHTML(browser.env.getHTML(), function () {
                    test.equal(copy.env.getHTML().replace(/\s*/g, ''), Hello.html,
                               "Creating a BrowserInstance with the clientHTML() of " +
                               "another BrowserInstance should create an identical " +
                               "BrowserInstance");
                    console.log('Finished with ' + env);
                    if (++count == Envs.length) {
                        test.done();
                    }
                });
            });
        });
    });
}

/* Client/BrowserInstance integration test */
exports.testClientIntegration = function (test) {
    var html = "<html><head><title>Test 123</title></head>" + 
                "<body>Here is a test!</body></html>";
    var count = 0;
    Envs.forEach(function (env) {
        var browser = new vt.BrowserInstance(env);
        browser.loadFromHTML(html, function (window, document) {
            test.ok(browser.window != undefined, 
                    "browser.loadFromHTML() should set the browser's window.");
            test.ok(browser.document != undefined, 
                    "browser.loadFromHTML() should set the browser's document.");
            var insts = browser.toInstructions();
            test.deepEqual(window, browser.window, 
                "Callback window should match browser property.");
            test.deepEqual(document, browser.document, 
                "Callback document should match browser property.");
            test.ok(insts.length > 0, 
                "No instructions generated by toInstructions()");

            var clientbrowser = new vt.BrowserInstance(env);
            clientbrowser.loadFromHTML("", function () {
                var engine = new vt.client.UpdateEngine(clientbrowser.document);
                engine.process(insts);
                test.equal(clientbrowser.env.getHTML(), browser.env.getHTML(),
                           "DOM created from instructions doesn't match original.");
                console.log('Finished with ' + env);
                if (++count == Envs.length) {
                    test.done();
                }
            });
        });
    });
};

/* Loads a browser with HackerNews, load jQuery, and checks some things about
   the page. 
   */
exports.testHackernews = function (test) {
    var count = 0;
    Envs.forEach(function (env) {
        if (env == 'zombie') {
            console.log('zombie: Loading scripts not yet implemented');
            console.log('zombie: Test not implemented.');
            if (++count == Envs.length) {
                test.done();
            }
            return;
        }
        var browsers = new vt.BrowserManager(env);
        var HackerNews = Fixtures.HackerNews;
        browsers.lookup(1, function (browser) {
            if (env == 'zombie') {
                console.log('Setting zombie to run scripts.');
                browser.env.browser.runScripts = true;
            }
            browser.loadFromURL(HackerNews.urlStr, function () {
                var linkTotal = 0;
                var script = browser.document.createElement('script');
                script.setAttribute('src', 'http://code.jquery.com/jquery-1.5.min.js');
                if (!script.addEventListener) {
                    throw new Error('Script element lacks addEventListener');
                }
                script.addEventListener('load', function () {
                    var $ = browser.window.$;
                    $('td.title:not(:last) a').each(function() {
                        linkTotal++;
                    });
                    test.equal(linkTotal, 30, 
                               "We should have counted 30 links on the " +
                               "HackerNews home page.");
                    console.log('Finished with ' + env);
                    if (++count == Envs.length) {
                        test.done();
                    }
                });
                script.addEventListener('error', function () {
                    fail("BrowserInstance failed to load jQuery.");
                    test.done();
                });
                browser.document.documentElement.appendChild(script);
            });
        });
    });
};
