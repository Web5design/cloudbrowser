var BrowserManager  = require('browser_manager'),
    BrowserInstance = require('browser_instance'),
    assert          = require('assert'),
    Fixtures        = require('./fixtures/fixtures'),
    Client          = require('client'),
    Envs            = Fixtures.Environments;


Envs.forEach(function (env) {
    /* BrowserManager/BrowserInstance integration test. */
    exports[env + '.testLocalPage'] = function () {
        var manager = new BrowserManager(env);
        var Hello = Fixtures.Hello;
        manager.lookup(1, function (browser) {
            browser.load(__dirname + '/' + Hello.pathStr, function () {
                assert.notEqual(browser.env.getHTML(), "", "Page should not be empty.");
                var copy = new BrowserInstance(env)
                copy.load(browser.env.getHTML(), function () {
                    assert.equal(copy.env.getHTML().replace(/\s*/g, ''), Hello.html,
                               "Creating a BrowserInstance with the getHTML() of " +
                               "another BrowserInstance should create an identical " +
                               "BrowserInstance");
                });
            });
        });
    };
    /* Client/BrowserInstance integration test */
    exports[env + '.testClientIntegration'] = function () {
        var html = "<html><head><title>Test 123</title></head>" + 
                    "<body>Here is a test!</body></html>";
        var bi = new BrowserInstance(env);
        bi.load(html, function (browser) {
            assert.ok(browser.window != undefined, 
                    "browser.loadFromHTML() should set the browser's window.");
            assert.ok(browser.document != undefined, 
                    "browser.loadFromHTML() should set the browser's document.");
            assert.strictEqual(bi.window, browser.window, 
                "Callback window should match browser property.");
            assert.strictEqual(bi.document, browser.document, 
                "Callback document should match browser property.");
            var insts = browser.toInstructions();
            assert.ok(insts.length > 0, 
                "No instructions generated by toInstructions()");

            var clientbrowser = new BrowserInstance(env);
            clientbrowser.load("", function () {
                var engine = new Client.UpdateEngine(clientbrowser.document);
                engine.process(insts);
                assert.equal(clientbrowser.env.getHTML(), browser.env.getHTML(),
                           "DOM created from instructions doesn't match original.");
            });
        });
    };
    /* Loads a browser with HackerNews, loads jQuery, and checks some things about
       the page. */
    /*
    exports[env + '.testHackerNews'] = function () {
        if (env == 'zombie') {
            console.log('zombie: Loading scripts not yet implemented');
            console.log('zombie: Test not implemented.');
            return;
        }
        var browsers = new BrowserManager(env);
        var HackerNews = Fixtures.HackerNews;
        browsers.lookup(1, function (browser) {
            browser.loadFromURL(HackerNews.urlStr, function () {
                var linkTotal = 0;
                var script = browser.document.createElement('script');
                script.setAttribute('src', 'http://code.jquery.com/jquery-1.5.min.js');
                if (!script.addEventListener) {
                    throw new Error('Script element lacks addEventListener');
                }
                script.addEventListener('load', function () {
                    var $ = browser.window.$;
                    $('td.title:not(:last) a').each(function() {
                        linkTotal++;
                    });
                    assert.equal(linkTotal, 30, 
                                "We should have counted 30 links on the " +
                                "HackerNews home page.");
                });
                script.addEventListener('error', function () {
                    assert.ok(false, "BrowserInstance failed to load jQuery.");
                });
                browser.document.documentElement.appendChild(script);
            });
        });
    };
    */
});
