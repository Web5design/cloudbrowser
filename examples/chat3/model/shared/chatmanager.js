// Generated by CoffeeScript 1.6.3
(function() {
  var ChatManager, ChatRoom, EventEmitter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ChatRoom = require('./chatroom');

  EventEmitter = require('events').EventEmitter;

  ChatManager = (function(_super) {
    __extends(ChatManager, _super);

    function ChatManager() {
      this.rooms = [];
      this.errorStrings = {
        roomExists: "Room with this name exists"
      };
    }

    ChatManager.prototype.createRoom = function(name) {
      var room, _i, _len, _ref;
      _ref = this.rooms;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        room = _ref[_i];
        if (room.name === name) {
          return [new Error(this.errorStrings.roomExists)];
        }
      }
      room = new ChatRoom(name);
      this.rooms.push(room);
      this.emit("newRoom", room);
      return [null, room];
    };

    ChatManager.prototype.addUserToRoom = function(user, room, newMessageHandler) {
      user.join(room, newMessageHandler);
      return room.add(user);
    };

    ChatManager.prototype.removeUserFromRoom = function(user, room) {
      user.leave(room);
      return room.remove(user);
    };

    ChatManager.prototype.getRooms = function() {
      return this.rooms;
    };

    ChatManager.prototype.removeRoom = function(room) {
      var idx;
      idx = this.rooms.indexOf(room);
      if (idx !== -1) {
        room.close();
        return this.rooms.splice(room, 1);
      }
    };

    return ChatManager;

  })(EventEmitter);

  module.exports = ChatManager;

}).call(this);
