// Generated by CoffeeScript 1.6.3
(function() {
  var Chat3, Util;

  Chat3 = angular.module("Chat3", []);

  Util = require('util');

  Chat3.controller("ChatCtrl", function($scope) {
    var addRoom, chatManager, currentVB, findRoom, getLastActiveRoom, lastActiveRoom, room, _i, _len, _ref;
    currentVB = cloudbrowser.currentVirtualBrowser;
    $scope.joinedRooms = [];
    $scope.otherRooms = [];
    $scope.activeRoom = null;
    $scope.roomName = null;
    $scope.currentMessage = "";
    $scope.selectedRoom = null;
    $scope.showCreateForm = false;
    $scope.showJoinForm = false;
    lastActiveRoom = null;
    $scope.safeApply = function(fn) {
      var phase;
      phase = this.$root.$$phase;
      if (phase === '$apply' || phase === '$digest') {
        if (fn) {
          return fn();
        }
      } else {
        return this.$apply(fn);
      }
    };
    findRoom = function(name, roomList) {
      var room;
      room = $.grep(roomList, function(element, index) {
        return element.name === name;
      });
      if (room.length) {
        return room[0];
      } else {
        return null;
      }
    };
    addRoom = function(room, roomList, setupListeners) {
      if (!findRoom(room.name, roomList)) {
        roomList.push(room);
      }
      if (setupListeners) {
        return room.on("NewMessage", function(message) {
          return $scope.safeApply();
        });
      }
    };
    getLastActiveRoom = function() {
      if (lastActiveRoom) {
        return lastActiveRoom;
      } else if ($scope.joinedRooms.length) {
        return $scope.joinedRooms[$scope.joinedRooms.length - 1];
      } else {
        return null;
      }
    };
    $scope.user = currentVB.getLocalState('user');
    chatManager = null;
    setTimeout(function() {
      var room, _i, _len, _ref, _results;
      chatManager = currentVB.getSharedStateConfig().getObj();
      $scope.rooms = chatManager.rooms;
      chatManager.on("NewRoom", function(room) {
        if (!findRoom(room.name, $scope.joinedRooms)) {
          return $scope.safeApply(function() {
            return addRoom(room, $scope.otherRooms, false);
          });
        }
      });
      if (chatManager) {
        _ref = chatManager.getAllRooms();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          room = _ref[_i];
          if (!findRoom(room.name, $scope.joinedRooms)) {
            _results.push(addRoom(room, $scope.otherRooms, false));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    }, 200);
    $scope.user.on("JoinedRoom", function(room) {
      return $scope.safeApply(function() {
        addRoom(room, $scope.joinedRooms, true);
        $scope.otherRooms = $.grep($scope.otherRooms, function(element, index) {
          return element.name !== room.name;
        });
        return $scope.activate(room);
      });
    });
    $scope.user.on("LeftRoom", function(name) {
      return $scope.safeApply(function() {
        $scope.joinedRooms = $.grep($scope.joinedRooms, function(element, index) {
          return element.name !== name;
        });
        addRoom(chatManager.getRoom(name), $scope.otherRooms, false);
        lastActiveRoom = null;
        return $scope.activeRoom = getLastActiveRoom();
      });
    });
    _ref = $scope.user.getAllRooms();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      room = _ref[_i];
      addRoom(room, $scope.joinedRooms, true);
      $scope.activate(room);
    }
    $scope.joinRoom = function() {
      chatManager.getRoom($scope.selectedRoom.name).join($scope.user);
      $scope.selectedRoom = null;
      return $scope.toggleForm('join');
    };
    $scope.leaveRoom = function(room) {
      return room.leave($scope.user);
    };
    $scope.createRoom = function() {
      room = chatManager.createRoom($scope.roomName);
      room.join($scope.user);
      $scope.roomName = null;
      $scope.activate(room);
      return $scope.toggleForm('create');
    };
    $scope.postMessage = function() {
      if ($scope.activeRoom) {
        $scope.activeRoom.postMessage($scope.user.name, $scope.currentMessage);
        return $scope.currentMessage = "";
      }
    };
    $scope.toggleForm = function(type) {
      if (type === "create") {
        return $scope.showCreateForm = !$scope.showCreateForm;
      } else if (type === "join") {
        return $scope.showJoinForm = !$scope.showJoinForm;
      }
    };
    return $scope.activate = function(room) {
      lastActiveRoom = $scope.activeRoom;
      return $scope.activeRoom = room;
    };
  });

  Chat3.directive('enterSubmit', function() {
    var directive;
    directive = {
      restrict: 'A',
      link: function(scope, element, attrs) {
        var submit;
        submit = false;
        return $(element).on({
          keydown: function(e) {
            submit = false;
            if (e.which === 13 && !e.shiftKey) {
              submit = true;
              return e.preventDefault();
            }
          },
          keyup: function() {
            if (submit) {
              scope.$eval(attrs.enterSubmit);
              return scope.$digest();
            }
          }
        });
      }
    };
    return directive;
  });

}).call(this);
